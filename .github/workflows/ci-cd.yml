name: IMDb Pipeline

on:
  workflow_dispatch:

jobs:
  imdb:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: imdb
          POSTGRES_PASSWORD: imdb
          POSTGRES_DB: imdb
        options: >-
          --shm-size=1g
          --health-cmd="pg_isready -U imdb -d imdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
            distribution: temurin
            java-version: 21

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends wget curl postgresql-client gzip
          sudo rm -rf /var/lib/apt/lists/*

      - name: Initialize Schema
        run: psql -h localhost -U imdb -d imdb -f ./src/main/resources/db/migration/V1__Initial_Schema.sql
        env:
          PGPASSWORD: imdb

      - name: Load IMDb data directly into Postgres
        run: |
          mkdir -p data
          for file in name.basics title.akas title.basics title.crew title.episode title.principals title.ratings; do
          tbl=$(basename "$file" .tsv | tr '.' '_')
          echo "üìä Downloading and loading $tbl..."
          
          wget -q "https://datasets.imdbws.com/$file.tsv.gz" -O "data/$file.tsv.gz"
          gunzip -f "data/$file.tsv"
          
          if psql -h localhost -U imdb -d imdb -tc "SELECT to_regclass('$tbl');" | grep -q "$tbl"; then
          
          if [[ "$tbl" == "title_principals" ]]; then
          echo "‚ö° Deduplicating $tbl before insert..."
          psql -h localhost -U imdb -d imdb <<'EOSQL'
          TRUNCATE TABLE title_principals;
          CREATE TEMP TABLE temp_title_principals AS TABLE title_principals WITH NO DATA;
          EOSQL
          psql -h localhost -U imdb -d imdb <<EOSQL
          \COPY temp_title_principals FROM 'data/$file.tsv' WITH (FORMAT text, DELIMITER E'\t', NULL '\N', HEADER true);
          INSERT INTO title_principals (tconst, ordering, nconst, category, job, characters)
          SELECT DISTINCT tconst, ordering, nconst, category, job, characters
          FROM temp_title_principals
          ON CONFLICT DO NOTHING;
          EOSQL
          else
          psql -h localhost -U imdb -d imdb <<EOSQL
          TRUNCATE TABLE $tbl;
          \COPY $tbl FROM 'data/$file.tsv' WITH (FORMAT text, DELIMITER E'\t', NULL '\N', HEADER true);
          EOSQL
          fi
          
          echo "‚úÖ $tbl loaded successfully."
          else
          echo "‚ö†Ô∏è Table $tbl does not exist, skipping."
          fi
          
          rm -f "data/$file.tsv"
          echo "üóë File deleted: $file.tsv"
          done
        env:
          PGPASSWORD: imdb

      - name: Analyze tables
        run: |
          psql -h localhost -U imdb -d imdb -c "VACUUM ANALYZE;"
        env:
          PGPASSWORD: imdb

      - name: Build and run API
        run: |
          mvn -B package --file pom.xml -DskipTests
          nohup mvn spring-boot:run -Dspring-boot.run.profiles=ci > /tmp/app.log 2>&1 &

          echo "‚è≥ Waiting for API to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8080/api/movies/health > /dev/null; then
              echo "‚úÖ API is up!"
              exit 0
            fi
            echo "Attempt $i/30: not up yet..."
            sleep 5
          done

          echo "‚ùå API did not start in time"
          echo "üîé Dumping app logs:"
          cat /tmp/app.log || true
          exit 1
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/imdb
          SPRING_DATASOURCE_USERNAME: imdb
          SPRING_DATASOURCE_PASSWORD: imdb
          SPRING_PROFILES_ACTIVE: ci
          OMDB_API_KEY: 7477790e

      - name: Wait for server
        run: |
          echo "Waiting for API..."
          until curl -s http://localhost:8080/api/movies/health; do sleep 5; done
      - name: Run API smoke tests
        run: |

          echo "üé¨ Search by title"
          curl -f "http://localhost:8080/api/movies?title=inception&page=0&size=5"

          echo "üé¨ Get movie details"
          curl -f "http://localhost:8080/api/movies/tt1375666"

          echo "‚≠ê Get top-rated movies"
          curl -f "http://localhost:8080/api/movies/top?limit=10"

          echo "ü§ñ Start recommendation session"
          curl -f -X POST "http://localhost:8080/api/movies/suggest/start" \
            -H "Content-Type: application/json" \
            -d '{"query": "Christopher Nolan movies"}'

          echo "üìù Submit feedback"
          curl -f -X POST "http://localhost:8080/api/movies/suggest/feedback" \
            -H "Content-Type: application/json" \
            -d '{
              "userId": "user123",
              "sessionId": "sess_abc123",
              "movieId": "tt1375666",
              "liked": true,
              "rating": 5
            }'

          echo "üéØ Get recommendations"
          curl -f "http://localhost:8080/api/movies/suggest/user123"
