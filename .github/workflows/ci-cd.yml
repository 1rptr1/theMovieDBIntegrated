name: IMDb Pipeline

on:
  workflow_dispatch:


jobs:
  imdb:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: imdb
          POSTGRES_PASSWORD: imdb
          POSTGRES_DB: imdb
        options: >-
          --health-cmd="pg_isready -U imdb -d imdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends wget curl postgresql-client gzip
          sudo rm -rf /var/lib/apt/lists/*

      - name: Cache IMDb data
        uses: actions/cache@v3
        with:
          path: data
          key: imdb-dataset-${{ hashFiles('.github/workflows/imdb.yml') }}

      - name: Download IMDb data (if not cached)
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p data
          for file in name.basics title.akas title.basics title.crew title.episode title.principals title.ratings; do
            wget -q "https://datasets.imdbws.com/$file.tsv.gz" -O - | gunzip > "data/$file.tsv"
          done
          ls -lh data/

      - name: Initialize Schema
        run: psql -h localhost -U imdb -d imdb -f ./src/main/resources/db/migration/V1__Initial_Schema.sql
        env:
          PGPASSWORD: imdb

      - name: Load tables
        run: |
          for file in data/*.tsv; do
            tbl=$(basename "$file" .tsv | tr '.' '_')
            echo "üìä Loading $tbl..."
            psql -h localhost -U imdb -d imdb -c "\COPY $tbl FROM '$file' WITH (FORMAT text, DELIMITER E'\t', NULL '\N', HEADER true)"
          done
        env:
          PGPASSWORD: imdb

      - name: Analyze tables
        run: psql -h localhost -U imdb -d imdb -c "VACUUM ANALYZE;"
        env:
          PGPASSWORD: imdb

      - name: Verify tables
        run: |
          psql -h localhost -U imdb -d imdb -c "\dt"
          psql -h localhost -U imdb -d imdb -c "
            SELECT table_name, row_estimate
            FROM (
              SELECT relname as table_name, reltuples::bigint as row_estimate
              FROM pg_class WHERE relkind='r'
            ) est
            WHERE table_name IN ('name_basics','title_basics','title_ratings','title_akas','title_crew','title_episode','title_principals')
            ORDER BY table_name;
          "
        env:
          PGPASSWORD: imdb

      - name: Build with Maven
        run: mvn -B package --file pom.xml -DskipTests

      - name: Run tests
        run: mvn -B test --file pom.xml
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/imdb
          SPRING_DATASOURCE_USERNAME: imdb
          SPRING_DATASOURCE_PASSWORD: imdb
          OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}
      - name: Start API in background
        run: |
          nohup mvn spring-boot:run > target/app.log 2>&1 &
          echo "‚è≥ Waiting for API to start..."
          for i in {1..30}; do
            if curl -s http://localhost:8080/api/movies/health | grep -q "UP"; then
              echo "‚úÖ API is up!"
              break
            fi
            sleep 2
          done
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/imdb
          SPRING_DATASOURCE_USERNAME: imdb
          SPRING_DATASOURCE_PASSWORD: imdb
          OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}

      - name: Run API smoke tests
        run: |
          echo "üîç Health Check"
          curl -f http://localhost:8080/api/movies/health

          echo "üé¨ Search by title"
          curl -f "http://localhost:8080/api/movies?title=inception&page=0&size=5"

          echo "üé¨ Search by genre and year"
          curl -f "http://localhost:8080/api/movies?genre=Sci-Fi&year=2020&page=0&size=10"

          echo "üé¨ Get all movies (paginated)"
          curl -f "http://localhost:8080/api/movies?page=0&size=20"

          echo "üé¨ Get movie details (Inception)"
          curl -f "http://localhost:8080/api/movies/tt1375666"

          echo "‚≠ê Get top-rated movies"
          curl -f "http://localhost:8080/api/movies/top?limit=10"

          echo "ü§ñ Start recommendation session"
          curl -f -X POST "http://localhost:8080/api/movies/suggest/start" \
            -H "Content-Type: application/json" \
            -d '{"query": "Christopher Nolan movies"}'

          echo "üìù Submit feedback on recommendations"
          curl -f -X POST "http://localhost:8080/api/movies/suggest/feedback" \
            -H "Content-Type: application/json" \
            -d '{
              "userId": "user123",
              "sessionId": "sess_abc123",
              "movieId": "tt1375666",
              "liked": true,
              "rating": 5
            }'

          echo "üéØ Get recommendations for user"
          curl -f "http://localhost:8080/api/movies/suggest/user123"