name: IMDb Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  imdb:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: imdb
          POSTGRES_PASSWORD: imdb
          POSTGRES_DB: imdb
        options: >-
          --health-cmd="pg_isready -U imdb -d imdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-

      - name: Build with Maven
        run: mvn -B package --file pom.xml -DskipTests

      - name: Run tests
        run: mvn -B test --file pom.xml
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/imdb
          SPRING_DATASOURCE_USERNAME: imdb
          SPRING_DATASOURCE_PASSWORD: imdb
          OMDB_API_KEY: ${{ secrets.OMDB_API_KEY }}

      - name: Install dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends wget curl postgresql-client gzip
          sudo rm -rf /var/lib/apt/lists/*

      - name: Download IMDb data
        run: |
          mkdir -p data
          for file in name.basics title.akas title.basics title.crew title.episode title.principals title.ratings; do
            wget -q "https://datasets.imdbws.com/$file.tsv.gz" -O - | gunzip > "data/$file.tsv"
          done
          ls -lh data/

      - name: Initialize Schema
        run: psql -h localhost -U imdb -d imdb -f ./src/main/resources/db/migration/V1__Initial_Schema.sql
        env:
          PGPASSWORD: imdb

      - name: Load tables
        run: |
          for file in data/*.tsv; do
            tbl=$(basename "$file" .tsv | tr '.' '_')
            echo "ðŸ“Š Loading $tbl..."
            psql -h localhost -U imdb -d imdb -c "\COPY $tbl FROM '$file' WITH (FORMAT text, DELIMITER E'\t', NULL '\N', HEADER true)"
          done
        env:
          PGPASSWORD: imdb

      - name: Analyze tables
        run: |
          psql -h localhost -U imdb -d imdb -c "VACUUM ANALYZE;"
        env:
          PGPASSWORD: imdb

      - name: Verify tables
        run: |
          psql -h localhost -U imdb -d imdb -c "\dt"
          psql -h localhost -U imdb -d imdb -c "
            SELECT table_name, row_estimate
            FROM (
              SELECT relname as table_name, reltuples::bigint as row_estimate
              FROM pg_class WHERE relkind='r'
            ) est
            WHERE table_name IN ('name_basics','title_basics','title_ratings','title_akas','title_crew','title_episode','title_principals')
            ORDER BY table_name;
          "
        env:
          PGPASSWORD: imdb

      - name: Build Docker image
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          docker build -t imdb-integrated:latest .

      - name: Login to GitHub Container Registry
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to GitHub Container Registry
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/imdb-integrated
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo ${VERSION} | sed -e 's/^v//')
          
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] || [ "$VERSION" == "master" ] && VERSION=latest
          
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          
          docker tag imdb-integrated:latest $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        
        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        
        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        
        # Use Docker `latest` tag convention
        [ "$VERSION" == "main" ] || [ "$VERSION" == "master" ] && VERSION=latest
        
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        
        docker tag imdb-integrated:latest $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION
